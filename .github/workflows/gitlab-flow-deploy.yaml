name: "GitLab Flow Deploy"

on:
  pull_request:
    types:
      - closed
    branches:
      - dev
      - test
      - prd

jobs:
  terraform:
    name: "Terraform"
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Post Update to Github PR 
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const output = `#### Running Terraform Apply: Environment ðŸ’»\`${{ github.ref }}\`
            #### Results will display here momentarily...  \`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: ${{ github.event.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.4
      
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Initialize Terraform
        id: init
        run: |
          cd terraform/environment/${{ github.ref }}
          terraform init -input=false
      
      - name: Plan Terraform
        id: plan
        continue-on-error: true
        run: |
          cd terraform/environment/${{ github.ref }}
          terraform plan -var-file=${{ github.ref }}.tfvars -input=false -no-color

      - name: Terraform Apply
        if: steps.plan.outcome == 'success'
        id: apply
        run: |
          cd terraform/environment/${{ github.ref }}
          terraform apply -var-file=${{ github.ref }}.tfvars -auto-approve      

      - name: Post Plan and Apply to Github PR
        if: steps.plan.outcome == 'success' && steps.apply.outcome == 'success'
        uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const output = `#### Applying Environment ðŸ’»\`${{ github.ref }}\`
            
            ```diff
            $${process.env.PLAN}
            ```

            ```
            ${{ steps.apply.outputs.stdout }}
            ```          
            github.issues.createComment({
              issue_number: ${{ github.event.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Post Plan Failure to Github PR
        if: steps.plan.outcome == 'failure'
        uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const output = `#### Plan Failed for Environment ðŸ’»\`${{ github.ref }}\`
            
            ```
            ${{ steps.plan.outputs.stderr }}
            ```
                   
            github.issues.createComment({
              issue_number: ${{ github.event.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Post Apply Failure to Github PR
        if: steps.apply.outcome == 'failure'
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const output = `#### Apply Failed for Environment ðŸ’»\`${{ github.ref }}\`
            
            ```
            ${{ steps.apply.outputs.stderr }}
            ``` 

            github.issues.createComment({
              issue_number: ${{ github.event.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })